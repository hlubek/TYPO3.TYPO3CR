== Node ==

=== Item getPrimaryItem() ===
The primary node type (see 4.7 Node Types) of this node may specify
one child item (child node or property) of this node as the primary child
item. This method returns that item.
In cases where the primary child item specifies the name of a set of
same-name sibling child nodes, the node returned will be the one
among the same-name siblings with index [1].
The same reacquisition semantics apply as with getNode.
If this node has no primary child item, either because none is declared
in the node type or because a declared primary item is not present on
this node instance or not accessible through the current
Session, then this method throws an ItemNotFoundException.
A RepositoryException is thrown if another error occurs.

=== int getIndex() ===
This method returns the index of this node within the ordered set of its
same-name sibling nodes. This index is the one used to address same-
name siblings using the square-bracket notation, e.g., /a[3]/b[4].
Note that the index always starts at 1 (not 0), for compatibility with
XPath. As a result, for nodes that do not have same-name-siblings, this
method will always return 1.

=== PropertyIterator getReferences() ===
Returns all REFERENCE properties that refer to this node and that are
accessible through the current Session.
Some level 2 implementations may only return properties that have
been saved (in a transactional setting this includes both those
properties that have been saved but not yet committed, as well as
properties that have been committed). Other level 2 implementations
may additionally return properties that have been added within the
current Session but are not yet saved.
In implementations that support versioning, this method does not return
REFERENCE properties that are part of the frozen state of a version in
version storage.
If this node has no accessible references, an empty iterator is returned.
A RepositoryException is thrown if an error occurs.

=== PropertyIterator getReferences(String name, boolean getWeakReferences) ===
If getWeakReferences is false, this method returns all REFERENCE
properties that refer to this node, have the specified
name and that are accessible through the current Session.
If getWeakReferences is true, this method returns all REFERENCE and
WEAKREFERENCE properties that refer to this node and have the specified
name.
If the name parameter is null then all referring  REFERENCES (and, if
specified, all referring WEAKREFERENCES) are returned regardless of name.
Some level 2 implementations may only return properties that have
been saved (in a transactional setting this includes both those
properties that have been saved but not yet committed, as well as
properties that have been committed). Other level 2 implementations
may additionally return properties that have been added within the
current Session but are not yet saved.
In implementations that support versioning, this method does not return
properties that are part of the frozen state of a version in version
storage.
If this node has no referring properties with the specified name, an
empty iterator is returned.
A RepositoryException is thrown if an error occurs.

=== boolean hasNode(String relPath) ===
Returns true if a node accessible through the current Session exists at
relPath and false otherwise.

=== NodeType[] getMixinNodeTypes() ===
Returns an array of NodeType objects representing the mixin node types
assigned to this node. This includes only those mixin types explicitly
assigned to this node, and therefore listed in the property
jcr:mixinTypes. It does not include mixin types inherited through the
addition of supertypes to the primary type hierarchy. See 4.7.23.2
Additions to the Hierarchy.
A RepositoryException is thrown if an error occurs.

=== boolean isNodeType(String nodeTypeName) ===
Returns true if this node is of the specified primary node type or mixin
type, or a subtype thereof. Returns false otherwise.
A RepositoryException is thrown if an error occurs.

=== NodeDefinition getDefinition() ===
Returns the node definition that applies to this Node. In some cases
there may appear to be more than one definition that could apply to this
node. However, it is assumed that upon creation of this node, a single
particular definition was used and it is that definition that this method
returns. How this governing definition is selected upon node creation
from among others which may have been applicable is an
implementation issue and is not covered by this specification. The
NodeDefinition returned when this method is called on the root node of
a workspace is also up to the implementation.
Throws a RepositoryException if an error occurs.
