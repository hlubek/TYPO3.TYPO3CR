== Session ==

=== boolean itemExists(String absPath) ===
Returns true if an item exists at absPath and this Session has read 
access to it; otherwise returns false.
A RepositoryException is thrown if absPath is not a well-formed 
absolute path. 
 
=== boolean nodeExists(String absPath) ===
Returns true if a node exists at absPath and this Session has read 
access to it; otherwise returns false. 
A RepositoryException is thrown if absPath is not a well-formed 
absolute path. 
 
=== boolean propertyExists(String absPath) ===
Returns true if a property exists at absPath and this Session has read 
access to it; otherwise returns false. 
A RepositoryException is thrown if absPath is not a well-formed 
absolute path. 
 
=== Session impersonate(Credentials c) ===
=== Returns a new Session in accordance with the specified (new) ===
Credentials. Allows the current user to “impersonate” another using 
incomplete or relaxed credentials requirements (perhaps including a 
user name but no password, for example), assuming that this 
Session gives them that permission. 
The new Session is tied to a new Workspace instance. In other words, 
Workspace instances are not re-used. However, the Workspace instance 
returned represents the same actual persistent workspace entity in the 
repository as is represented by the Workspace object tied to this Session. 
A LoginException is thrown if this session does not have sufficient 
permissions to perform the operation. 
A RepositoryException is thrown if another error occurs. 

void exportSystemView(String absPath, 
                 ContentHandler contentHandler, 
                 boolean skipBinary, 
                 boolean noRecurse) 
Serializes the node (and if noRecurse is false, the whole subtree) at 
absPath into a series of SAX events by calling the methods of the 
supplied org.xml.sax.ContentHandler. The resulting XML is in the 
system view form. Note that absPath must be the path of a node, not a 
property. 
If skipBinary is true then any properties of PropertyType.BINARY will 
be serialized as if they are empty. That is, the existence of the property 
will be serialized, but its content will not appear in the serialized output 
(the <sv:value> element will have no content). Note that in the case of 
multi-value BINARY properties, the number of values in the property will 
be reflected in the serialized output, though they will all be empty. If 
skipBinary is false then the actual value(s) of each BINARY property is 
recorded using Base64 encoding. 
If noRecurse is true then only the node at absPath and its properties, 
but not its child nodes, are serialized. If noRecurse is false then the 
entire subtree rooted at absPath is serialized. 
If the user lacks read access to some subsection of the specified tree 
that section simply does not get serialized, since, from the user's point 
of view it is not there. 
The serialized output will reflect the state of the current workspace as 
modified by the state of this Session. This means that pending changes 
(regardless of whether they are valid according to node type 
constraints) and all namespace mappings in the namespace registry, as 
modified by the current session-mappings, are reflected in the output. 
A PathNotFoundException is thrown if no node exists at absPath. 
A SAXException is thrown if an error occurs while feeding events to the 
ContentHandler. 
A RepositoryException is thrown if another error occurs. 

void exportSystemView(String absPath, 
                 OutputStream out, 
                 boolean skipBinary, 
                 boolean noRecurse) 
Serializes the node (and if noRecurse is false, the whole subtree) at 
absPath into an XML stream and outputs it through the supplied 
OutputStream. The resulting XML is in the system view form. Note that 
absPath must be the path of a node, not a property. 
If skipBinary is true then any properties of PropertyType.BINARY will 
be serialized as if they are empty. That is, the existence of the property 
will be serialized, but its content will not appear in the serialized output 
(the <sv:value> element will have no content). Note that in the case of 
multi-value BINARY properties, the number of values in the property will 
be reflected in the serialized output, though they will all be empty. If 
skipBinary is false then the actual value(s) of each BINARY property is 
recorded using Base64 encoding. 
If noRecurse is true then only the node at absPath and its properties, 
but not its child nodes, are serialized. If noRecurse is false
then the entire subtree rooted at absPath is serialized. 
If the user lacks read access to some subsection of the specified tree 
that section simply does not get serialized, since, from the user's point 
of view it is not there. 
The serialized output will reflect the state of the current workspace as 
modified by the state of this Session. This means that pending changes 
(regardless of whether they are valid according to node type 
constraints) and all namespace mappings in the namespace registry, as 
modified by the current session-mappings, are reflected in the output. 
The output XML will be encoded in UTF-8. 
It is the responsibility off the caller to close the passed OutputStream. 
An IOException is thrown if an I/O error occurs. 
A PathNotFoundException is thrown if no node exists at absPath. 
A RepositoryException is thrown if another error occurs. 

void exportDocumentView(String absPath, 
                 ContentHandler contentHandler, 
                 boolean skipBinary, 
                 boolean noRecurse) 
Serializes the node (and if noRecurse is false, the whole subtree) at 
absPath into a series of SAX events by calling the methods of the 
supplied org.xml.sax.ContentHandler. The resulting XML is in the 
document view form. Note that absPath must be the path of a node, 
not a property. 
If skipBinary is true then any properties of PropertyType.BINARY will 
be serialized as if they are empty. That is, the existence of the property 
will be serialized, but its content will not appear in the serialized output 
(the value of the attribute will be empty). If skipBinary is false then 
the actual value(s) of each BINARY property is recorded using Base64 
encoding. 
If noRecurse is true then only the node at absPath and its properties, 
but not its child nodes, are serialized. If noRecurse is false then the 
entire subtree rooted at absPath is serialized. 
If the user lacks read access to some subsection of the specified tree 
that section simply does not get serialized, since, from the user's point 
of view it is not there. 
The serialized output will reflect the state of the current workspace as 
modified by the state of this Session. This means that pending changes 
(regardless of whether they are valid according to node type 
constraints) and all namespace mappings in the namespace registry, as 
modified by the current session-mappings, are reflected in the output. 
A PathNotFoundException is thrown if no node exists at absPath. 
A SAXException is thrown if an error occurs while feeding events to the 
ContentHandler. 
A RepositoryException is thrown if another error occurs. 

void exportDocumentView(String absPath, 
                   OutputStream out, 
                   boolean skipBinary, 
                   boolean noRecurse) 
Serializes the node (and if noRecurse is false, the whole subtree) at 
absPath into an XML stream and outputs it through the supplied 
OutputStream. The resulting XML is in the document view form. Note 
that absPath must be the path of a node, not a property. 
If skipBinary is true then any properties of PropertyType.BINARY will 
be serialized as if they are empty. That is, the existence of the property 
will be serialized, but its content will not appear in the serialized output 
(the value of the attribute will be empty). If skipBinary is false then 
the actual value(s) of each BINARY property is recorded using Base64 
encoding. 
If noRecurse is true then only the node at absPath and its properties, 
but not its child nodes, are serialized. If noRecurse is false then the 
entire subtree rooted at absPath is serialized. 
If the user lacks read access to some subsection of the specified tree 
that section simply does not get serialized, since, from the user's point 
of view it is not there. 
The serialized output will reflect the state of the current workspace as 
modified by the state of this Session. This means that pending changes 
(regardless of whether they are valid according to node type 
constraints) and all namespace mappings in the namespace registry, as 
modified by the current session-mappings, are reflected in the output. 
The output XML will be encoded in UTF-8. 
It is the responsibility off the caller to close the passed OutputStream. 
An IOException is thrown if an I/O error occurs. 
A PathNotFoundException is thrown if no node exists at absPath. 
A RepositoryException is thrown if another error occurs. 

=== void checkPermission(String absPath, String actions) ===
Determines whether this Session has permission to perform the 
specified actions at the specified absPath. This method quietly returns 
if the access request is permitted, or throws a suitable 
java.security.AccessControlException otherwise. 
The actions parameter is a comma separated list of action strings. The 
following action strings are defined: 

add_node 
If checkPermission(path, "add_node") returns quietly, then this 
Session has permission to add a node at path, otherwise permission is 
denied. 

set_property 
If checkPermission(path, "set_property") returns quietly, then this 
Session has permission to set (add or change) a property at path, 
otherwise permission is denied. 

remove 
If checkPermission(path, "remove") returns quietly, then this 
Session has permission to remove an item at path, otherwise 
permission is denied. 

read 
If checkPermission(path, "read") returns quietly, then this Session 
has permission to retrieve (and read the value of, in the case of a 
property) an item at path, otherwise permission is denied. 
When more than one action is specified in the 
actions parameter, this method will only return quietly if this 
Session has permission to perform all of the listed actions at the specified 
path. 

The information returned through this method will only reflect access 
control policies and not other restrictions that may exist. For example, 
even though checkPermission may indicate that a particular Session 
may add a property at /A/B/C, the node type of the node at /A/B may 
prevent the addition of a property called C. 
A RepositoryException is thrown if an error occurs. 
