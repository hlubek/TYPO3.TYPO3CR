== NodeDefinition extends ItemDefinition ==

=== NodeType[] getRequiredPrimaryTypes() ===
Gets the minimum set of primary node types that the child node must 
have. Returns an array to support those implementations with multiple 
inheritance. This method never returns an empty array. If this node 
definition places no requirements on the primary node type, then this 
method will return an array containing only the NodeType object 
representing nt:base, which is the base of all primary node types and 
therefore constitutes the least restrictive node type requirement. Note 
that any particular node instance still has only one assigned primary 
node type, but in multiple-inheritance-supporting implementations the 
RequiredPrimaryTypes attribute can be used to restrict that assigned 
node type to be a subtype of all of a specified set of node types. 
In implementations that support node type registration (see 6.6 Node 
Type Registration) an NodeDefinition object may be acquired (in the 
form of a NodeDefinitionTemplate) that is not attached to a live 
NodeType. In such cases this method returns an array containing only 
the NodeType object representing nt:base. 

=== String[] getRequiredPrimaryTypeNames() ===
Returns the names of the required primary node types. If this 
NodeDefinition is acquired from a live NodeType this list will 
reflect the node types returned by getRequiredPrimaryTypes, above. 
If this NodeDefinition is actually a NodeDefinitionTemplate that is 
not part of a registered node type, then this method will return the 
required primary types as set in that template. If that template is a 
newly-created empty one, then this method will return an array 
containing a single string indicating the node type nt:base. 

=== NodeType getDefaultPrimaryType() ===
Gets the default node type that will be assigned to the child node if it is 
created without an explicitly specified node type. This node type must be 
a subclass of (or the same class as) the node type(s) returned by 
getRequiredPrimaryTypes. 
If null is returned this indicates that no default primary type is specified 
and that therefore an attempt to create this node without specifying a 
node type will throw a ConstraintViolationException.  
In implementations that support node type registration (see 6.6 Node 
Type Registration) an NodeDefinition object may be acquired (in the 
form of a NodeDefinitionTemplate) that is not attached to a live 
NodeType. In such cases this method returns null. 

=== String getDefaultPrimaryTypeName() ===
Returns the name of the default primary node type. If this 
NodeDefinition is acquired from a live NodeType this list will 
reflect the NodeType returned by getDefaultPrimaryType, above. 
If this NodeDefinition is actually a NodeDefinitionTemplate that is 
not part of a registered node type, then this method will return the 
required primary types as set in that template. If that template is a 
newly-created empty one, then this method will return 
null.

=== boolean allowsSameNameSiblings() ===
Reports whether this child node can have same-name siblings. In other 
words, whether the parent node can have more than one child node of 
this name.
If this NodeDefinition is actually a NodeDefinitionTemplate that is not 
part of a registered node type, then this method will return the same 
name siblings status as set in that template. If that template is a newly- 
created empty one, then this method will return false. 
