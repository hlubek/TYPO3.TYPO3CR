== Property ==


=== Node getNode() ===
If this property is of type REFERENCE, WEAKREFERENCE or PATH (or
convertible to one of these types) this method returns the
Node to which this property refers.
If this property is of type PATH and it contains a relative path, it is
interpreted relative to the parent node of this property. For
example “.” refers to the parent node itself, “..” to the parent of
the parent node and “foo” to a sibling node of this property.
If this property is of type WEAKREFERENCE and no node exists in this
workspace with the specified UUID then an ItemNotFoundException is thrown.
If this property is of type PATH and no node accessible by the
current Session exists in this workspace at the specified path then
an ItemNotFoundException is thrown. Note that this applies even
if a property exists at the specified location. To dereference to a
target property, the method Property.getProperty is used.
If this property is multi-valued, this method throws a
ValueFormatException. If this property cannot be converted to a
REFERENCE, WEAKREFERENCE or PATH then a ValueFormatException is thrown.
If this property is currently part of the frozen state of a version in
version storage, this method will throw a ValueFormatException.
A RepositoryException is thrown if another error occurs.

=== Property getProperty() ===
If this property is of type PATH (or convertible to this type) this
method returns the Property to which this property refers.
If this property contains a relative path, it is interpreted relative to
the parent node of this property. For example “.” refers to the parent
node itself, “..” to the parent of the parent node and “foo” to a sibling
property of this property or this property itself.
If no property exists in this workspace at the specified path then an
ItemNotFoundException is thrown. Note that this applies even if a
node exists at the specified location. To dereference to a target
node, the method Property.getNode is used.
If this property is multi-valued, this method throws a ValueFormatException.
If this property cannot be converted to a PATH then a
ValueFormatException is thrown.
If this property is currently part of the frozen state of a version in
version storage, this method will throw a ValueFormatException.
A RepositoryException is thrown if another error occurs.

=== long getLength() ===
Returns the length of the value of this property in bytes if the value
is a BINARY, otherwise it returns the number of characters needed
to display the value in its string form as defined in 4.2.7 Property
Type Conversion.
Returns –1 if the implementation cannot determine the length of
the value.
If this property is multi-valued, this method throws a ValueFormatException.
A RepositoryException is thrown if another error occurs.

=== long[] getLengths() ===
Returns an array holding the lengths of the values of this (multi-
value) property in bytes if the values are PropertyType.BINARY,
otherwise it returns the number of characters needed to display
each value in its string form as defined in 4.2.7 Property Type
Conversion). The order of the length values corresponds to the
order of the values in the property.
Returns a –1 in the appropriate position if the implementation
cannot determine the length of a value.
If this property is single-valued, this method throws a
ValueFormatException.
A RepositoryException is thrown if another error occurs.

=== int getType() ===
Returns the type of this Property. The type returned is that which
was set at property creation. Note that for some property
p, the type returned by p.getType() will differ from the type returned by
p.getDefinition.getRequiredType() only in the case where the
latter returns UNDEFINED. The type of a property instance is never
UNDEFINED (it must always have some actual type). See 4.2.6
Property Types and 4.7.19 Discovery of Constraints on Existing
Items.

=== PropertyDefinition getDefinition() ===
Returns the property definition that applies to this Property. In some
cases there may appear to be more than one definition that could apply
to this property. However, it is assumed that upon creation of this
property, a single particular definition was used and it is that definition
that this method returns. How this governing definition is selected upon
property creation from among others which may have been applicable is
an implementation issue and is not covered by this specification.
Throws a RepositoryException if an error occurs.
