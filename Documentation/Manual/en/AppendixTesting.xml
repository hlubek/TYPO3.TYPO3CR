<?xml version="1.0" encoding="UTF-8"?>
<appendix version="5.0" xmlns="http://docbook.org/ns/docbook"
          xmlns:xl="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns="http://docbook.org/ns/docbook"
          xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Running the unit tests</title>

  <para>Out of the box only the unit tests for SQLite are run, as the tests
  for MySQL and PostgreSQL need a working setup of the respective database.
  This can be achieved with a fixture helper shell script named
  <command>testdb.sh</command> found in
  <filename>Tests/Fixtures/</filename></para>

  <para>To complete this you need to do the following:</para>

  <procedure>
    <step>
      <para>Adjust <filename>Tests/Fixtures/testdb.conf</filename> to suit
      your system. The file looks something like like this:</para>

      <literallayout>SQLITE3="/opt/local/bin/sqlite3"
SQLITE3_DBFILE="/Users/karsten/Sites/flow3/Packages/Global/TYPO3CR/Tests/Fixtures/TYPO3CR.db"

PSQL="/opt/local/bin/psql83"
PGSQL_USER="flow3test"
PGSQL_PASS="flow3test"
PGSQL_DB="flow3test"

MYSQL="/opt/local/bin/mysql5"
MYSQL_USER="flow3test"
MYSQL_PASS="flow3test"
MYSQL_DB="flow3test"</literallayout>

      <para>For SQLite you need to adjust the data only if you ever intend to
      create or update the fixture database. Probably you won't, so you can
      leave this alone.</para>

      <para>For PostgreSQL and MySQL the fixture helper need to be told the
      path to your command line clients for the database and the database
      name, username and password you want to see used for the unit tests.
      Obviously, do not use an existing user or database!</para>
    </step>

    <step>
      <para>Now you can use <command>testdb.sh
      <replaceable>[database]</replaceable> setup</command> to test the setup
      of the test skeleton. If all runs well with it, the tests should run as
      well. They use the same shell script to clean up the test database(s)
      for every test.</para>
    </step>
  </procedure>

  <para>Here is the usage information for
  <command>testdb.sh</command>:<literallayout><computeroutput>Usage ./testdb.sh [ sqlite | postgres | mysql ] [ setup | reset | dump | cleanup ]

setup   Setup database and user (for mysql+postgresql) from .sql files
reset   Reset database to a clean state after a test (does not drop it, just deletes table content and reinserts testdata, not useful for testing code that creates new tables)
dump    Show current content of the test database
cleanup Remove test database and user
</computeroutput></literallayout></para>
</appendix>
