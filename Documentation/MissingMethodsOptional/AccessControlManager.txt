== AccessControlManager ==

=== java.security.Privilege[] getSupportedPrivileges(String absPath) ===
Returns the privileges supported for absolute path absPath, which must 
be an existing node. 
This method does not return the privileges held by the session. Instead, 
it returns the privileges that the repository supports. 
A PathNotFoundException is thrown if no node at absPath exists or the 
session does not have privilege to retrieve the node. 
A RepositoryException is thrown if another error occurs. 

=== boolean hasPrivileges(String absPath, String[] privileges) ===
Returns whether the session has the specified privileges for absolute 
path absPath, which must be an existing node. 
Testing an aggregate privilege is equivalent to testing each non- 
aggregate privilege among the set returned by calling 
Privilege.getAggregatePrivileges() for that privilege. 
A PathNotFoundException is thrown if no node at absPath exists or the 
session does not have privilege to retrieve the node. 
A RepositoryException is thrown if another error occurs. 

=== java.security.Privilege[] getPrivileges(String absPath) ===
Returns the privileges the session has for absolute path 
absPath, which must be an existing node. 
The returned privileges are those for which hasPrivileges() would 
return true. 
A PathNotFoundException is thrown if no node at absPath exists or the 
session does not have privilege to retrieve the node. 
An AccessDeniedException is thrown if the session lacks 
jcr:getAccessControlPolicy privilege for the node. 
A RepositoryException is thrown if another error occurs. 

=== Node getAccessControlPolicy(String absPath) ===
Returns the node of type nt:accessControlPolicy that is the access 
control policy in effect for the node with absolute path absPath. If the 
node with path absPath is mix:accessControlled, this is the access 
control policy referenced by its jcr:accessControlPolicy property. 
Otherwise, it is that of its nearest mix:accessControlled ancestor. 
A PathNotFoundException is thrown if no node at absPath exists or the 
session does not have privilege to retrieve the 
absPath node. 
An AccessDeniedException is thrown if the session lacks 
jcr:getAccessControlPolicy privilege for the absPath node. 
A RepositoryException is thrown if another error occurs. 
